#pragma once
#include <string>
#include <vector>

#define USER_FROM_ID 250 

#define FORM_BUTTON_WIDTH	24
#define FORM_BUTTON_HEIGHT	24

#define QIMAGE_LIST_ITEM_WIDTH 224
#define QIMAGE_LIST_ITEM_HEIGHT 126

namespace Config {

//PANEL的ID
typedef enum {
	HOME_PANEL = WM_USER + 1,
	DATABASE_PANEL,
	ANALYSIS_PANEL,
	VIEW_PANEL,
	SETTING_PANEL,
	// 不列入菜单项的PANEL
	ANALYSIS_LIST_PANEL,
	TAKEN_IMAGE_PANEL,
	SAMPLE_SETTINGS_PANEL
} PanelId;


//框架用的工具栏上的按钮ID
typedef enum {
	UNSED_BUTTON_ID = 0,
	HOME_BUTTON_ID = WM_USER + 10,
	DATABASE_BUTTON_ID,
	ANALYSIS_BUTTON_ID,
	VIEW_BUTTON_ID,
	SETTING_BUTTON_ID,
} FrmButtonId ;

// button id
typedef enum {
	// YES/NO
	CUSTOMER_FORM_YES_BUTTON_ID = WM_USER + 40,
	CUSTOMER_FORM_NO_BUTTON_ID,
	QIMAGE_PREV_PAGE_BUTTON_ID,
	QIMAGE_NEXT_PAGE_BUTTON_ID,

	// TREE VIEW
	DATABASE_CREATE_BUTTON_ID,
	DATABASE_OPEN_BUTTON_ID,
	DATABASE_REFRESH_BUTTON_ID,
	DATABASE_DELETE_BUTTON_ID,

	// RIGHT VIEW TOOLBAR
	DATABASE_EXEC_SQL_BUTTON_ID,
	DATABASE_EXEC_ALL_BUTTON_ID,

	//LIST VIEW TOOLBAR
	LISTVIEW_EXPORT_BUTTON_ID,
	LISTVIEW_COPY_BUTTON_ID,
	LISTVIEW_FILTER_BUTTON_ID,
	LISTVIEW_REFRESH_BUTTON_ID,
	LISTVIEW_NEW_ROW_BUTTON_ID,
	LISTVIEW_COPY_ROW_BUTTON_ID,
	LISTVIEW_SAVE_BUTTON_ID,
	LISTVIEW_DELETE_BUTTON_ID,
	LISTVIEW_CANCEL_BUTTON_ID,

	QDIALOG_CLEAR_BUTTON_ID,
	QDIALOG_YES_BUTTON_ID,
	QDIALOG_NO_BUTTON_ID,

	// EXPORT-FEILDS
	EXPORT_SELECT_ALL_FIELDS_BUTTON_ID,
	EXPORT_DESELECT_ALL_FIELDS_BUTTON_ID,
	EXPORT_OPEN_FILE_BUTTON_ID,

	// EXPORT DB AS SQL
	EXPORT_DB_AS_SQL_OPEN_FILE_BUTTON_ID,
	EXPORT_DB_AS_SQL_SELECT_ALL_OBJECTS_BUTTON_ID,
	EXPORT_DB_AS_SQL_DESELECT_ALL_OBJECTS_BUTTON_ID,

	// IMPORT DB FROM SQL
	IMPORT_DB_FROM_SQL_OPEN_FILE_BUTTON_ID,

	// NEW TABLE PAGE
	TABLE_NEW_COLUMN_BUTTON_ID,
	TABLE_DEL_COLUMN_BUTTON_ID,
	TABLE_UP_COLUMN_BUTTON_ID,
	TABLE_DOWN_COLUMN_BUTTON_ID,
	TABLE_SAVE_BUTTON_ID,
	TABLE_REVERT_BUTTON_ID,
} ButtonId;

// TabView id
typedef enum {
	DATABASE_WORK_TAB_VIEW_ID = WM_USER + 100,
	DATABASE_TABLE_TAB_VIEW_ID,
} TabViewId;

typedef enum {
	// TREE VIEW
	TREEVIEW_SELECTED_DB_COMBOBOX_ID = WM_USER + 110,
	//LIST VIEW TOOLBAR
	LISTVIEW_READ_WRITE_COMBOBOX_ID,

	// EXPORT DATABASE AS SQL
	EXPORT_DB_AS_SQL_SELECT_DB_COMBOBOX_ID,
	// IMPORT DATABASE FROM SQL
	IMPORT_DB_FROM_SQL_SELECT_DB_COMBOBOX_ID,

	//NEW TABLE 
	NEW_TABLE_DATABASE_COMBOBOX_ID,
	NEW_TABLE_SCHEMA_COMBOBOX_ID,
} ComboBoxId;


typedef enum {
	DATABASE_TREEVIEW_ID = WM_USER + 120,
	DATABASE_OBJECTS_TREEVIEW_ID,
} TreeViewId;


typedef enum {
	DATABASE_QUERY_EDITOR_ID = WM_USER + 130,
	// LIST VIEW 
	LISTVIEW_OFFSET_EDIT_ID,
	LISTVIEW_LIMIT_EDIT_ID,
	// EXPORT RESULT
	EXPORT_CSV_FIELD_TERMINAATED_BY_EDIT_ID,
	EXPORT_CSV_FIELD_ENCLOSED_BY_EDIT_ID,
	EXPORT_CSV_FIELD_ESCAPED_BY_EDIT_ID,
	EXPORT_CSV_LINE_TERMINAATED_BY_EDIT_ID,
	EXPORT_CSV_CHARSET_EDIT_ID,
	EXPORT_EXCEL_COLUMN_MAX_SIZE_EDIT_ID,
	EXPORT_EXCEL_DECIMAL_PLACES_EDIT_ID,
	EXPORT_PATH_EDIT_ID,
	// RESULT
	QLISTVIEWCTRL_SUBITEM_EDIT_ID,
	INFOPAGE_INFO_EDIT_ID,
	// EXPORT DATABASE AS SQL
	EXPORT_DB_AS_SQL_PATH_EDIT_ID,
	// IMPORT DATABASE FROM SQL
	IMPORT_DB_FROM_SQL_PATH_EDIT_ID,

	// NEW TABLE
	NEW_TABLE_TBL_NAME_EDIT_ID,
} EditorId;

typedef enum {
	// QUERY RESULT
	DATABASE_QUERY_LISTVIEW_ID = WM_USER + 140,
	// NEW TABLE/MODIFY TABLE
	DATABASE_TABLE_COLUMNS_LISTVIEW_ID,
} ListViewId;

typedef enum {
	//LIST VIEW TOOLBAR
	LISTVIEW_FORMVIEW_CHECKBOX_ID = WM_USER + 150,
	LISTVIEW_LIMIT_CHECKBOX_ID,
	//EXPORT - CSV OPTIONS
	EXPORT_CSV_COLUMN_NAME_CHECKBOX_ID,

	// EXPORT DATABASE AS SQL
	EXPORT_RETAIN_COLUMN_CHECKBOX_ID,
	EXPORT_CONTAIN_MULTI_ROWS_CHECKBOX_ID,

	//IMPORT DABASE FROM SQL
	IMPORT_ABORT_ON_ERROR_CHECKBOX_ID,
} CheckBoxId;

typedef enum {
	//LIST VIEW TOOLBAR
	EXPORT_TO_CSV_RADIO_ID = WM_USER + 160,
	EXPORT_TO_JSON_RADIO_ID,
	EXPORT_TO_XML_RADIO_ID,
	EXPORT_TO_HTML_RADIO_ID,
	EXPORT_TO_EXCEL_XML_RADIO_ID,
	EXPORT_TO_SQL_RADIO_ID,
	// SQL SETTING
	EXPORT_SQL_STRUCTURE_ONLY_RADIO_ID,
	EXPORT_SQL_DATA_ONLY_RADIO_ID,
	EXPORT_SQL_STRUCTURE_DATA_RADIO_ID,

	// EXPORT DATABASE AS SQL DIALOG
	EXPORT_RETAIN_TABLE_RADIO_ID,
	EXPORT_OVERRIDE_TABLE_RADIO_ID,
} RadioId;

typedef enum {
	//LIST VIEW TOOLBAR
	EXPORT_TO_CSV_GROUPBOX_ID = WM_USER + 180,
	EXPORT_TO_CSV_FEILD_SET_GROUPBOX_ID,
	EXPORT_TO_CSV_LINE_SET_GROUPBOX_ID,
	EXPORT_TO_CSV_CHARSET_SET_GROUPBOX_ID,
	EXPORT_TO_EXCEL_GROUPBOX_ID,
	EXPORT_TO_SQL_GROUPBOX_ID,
	EXPORT_FEILDS_GROUPBOX_ID,

	// EXPORT DATABASE AS SQL DIALOG
	EXPORT_AS_SQL_STRUCTURE_AND_DATA_GROUPBOX_ID,
	EXPORT_AS_SQL_INSERT_STATEMENT_GROUPBOX_ID,
	EXPORT_AS_SQL_TBL_STATEMENT_GROUPBOX_ID,
} GroupBoxId;

typedef enum {
	EXPORT_SELECT_FIELDS_LISTBOX_ID = WM_USER + 200,
} ListBoxId;

typedef enum {
	// list view copy menu
	COPY_ALL_ROWS_TO_CLIPBOARD_MEMU_ID = WM_USER + 220,
	COPY_SEL_ROWS_TO_CLIPBOARD_MEMU_ID,
	COPY_ALL_ROWS_AS_SQL_MEMU_ID,
	COPY_SEL_ROWS_AS_SQL_MEMU_ID,
	// treeview popup menu for database
	DATABASE_CREATE_MENU_ID,
	DATABASE_OPEN_MENU_ID,
	DATABASE_REFRESH_MENU_ID,
	DATABASE_DELETE_MENU_ID,
	DATABASE_EXPORT_AS_SQL_MENU_ID,
	DATABASE_IMPORT_FROM_SQL_MENU_ID,
	DATABASE_NEW_MENU_ID,
	DATABASE_NEW_TABLE_MENU_ID,
	DATABASE_NEW_VIEW_MENU_ID,
	DATABASE_NEW_TRIGGER_MENU_ID,

	// treeview popup menu for table
	TABLE_OPEN_MENU_ID,
	TABLE_CREATE_MENU_ID,
	TABLE_MODIFY_MENU_ID,
	TABLE_DELETE_MENU_ID,
	TABLE_EXPORT_MENU_ID,
	TABLE_IMPORT_SQL_MENU_ID,
	TABLE_IMPORT_CSV_MENU_ID,
	TABLE_NEW_INDEX_MENU_ID,
	TABLE_MODIFY_INDEX_MENU_ID,
} MenuId;

// PostMessage messageId
typedef enum {
	MSG_TIMER_MOVE_ID = WM_USER + 240, // QPopAnimate 触发的移动定时器
	MSG_TIMER_DELAY_ID, // QPopAnimate 触发的悬停定时器
	MSG_QIMAGE_CLICK_ID, // 点击QStaticImage,如果命中右下角小图标，则调用上一个消息ID， 否则，给父窗口发送此消息 wParam带上被点击的窗口ID lParam带上窗口句柄hwnd
	MSG_QIMAGE_CONERICON_CLICK_ID, // 点击QStaticImage图片右下角小图标（拍照等），给父窗口发送此消息 wParam带上被点击的窗口ID lParam带上窗口句柄hwnd
	MSG_QIMAGELIST_CLICK_ID, // 单击QImageList图片列表，给父窗口发送消息，wParam为被选中项下标nSelItem，lParam带上被选中项的窗口句柄
	MSG_TREEVIEW_CLICK_ID, // 单击LeftTreeView::treeView的选中项，发送该消息，接收方wParam为CTreeViewCtrlEx *指针, lParam 是HTREEITEM指针，接收方通过lParam获得需要的数据
	MSG_TREEVIEW_DBCLICK_ID, // 双击LeftTreeView::treeView的选中项，发送该消息，接收方wParam为CTreeViewCtrlEx *指针, lParam 是HTREEITEM指针，接收方通过lParam获得需要的数据
	MSG_QLISTVIEW_SUBITEM_TEXT_CHANGE_ID, // QListViewCtrl的子项（subItem）的文本发生改变时，向父窗口发送该消息,wParam=iItem, lParam=iSubItem
	MSG_QLISTVIEW_COLUMN_CLICK_ID, // QListViewCtrl的Column被点击时，向父窗口发送该消息,wParam=iItem, lParam=(LPNMHEADER)lParam
	MSG_EXEC_SQL_RESULT_MESSAGE_ID, // 执行SQL语句后，返回的消息，wParam- NULL，lParam - point of adapter.runtimeResultInfo
	MSG_EXPORT_DB_AS_SQL_PROCESS_ID, // 导出数据库为SQL对话框进度的消息,wParam是完成状态，lParam是完成百分比
	MSG_IMPORT_DB_FROM_SQL_PROCESS_ID, // SQL导入数据库对话框进度的消息,wParam是完成状态，lParam是完成百分比
	MSG_NEW_TABLE_ID, // Click "New table" menu or toolbar button will send this msg, wParam=NULL, lParam=NULL
}MessageId;

typedef enum {
	RESULT_STATUSBAR_SQL_PANE_ID = WM_USER + 260,
	RESULT_STATUSBAR_ROWS_PANE_ID,
	RESULT_STATUSBAR_EXEC_TIME_PANE_ID,
}StatusBarPaneId;

typedef enum {
	QIMAGE_LIST_ID_START = WM_USER + 1024,
	QIMAGE_LIST_ID_END = WM_USER + 1099,
} ImageIdRank;

typedef enum {
	FILTER_OP_BUTTON_ID_START = WM_USER + 1124,
	FILTER_OP_BUTTON_ID_END = WM_USER + 1199,
} ButtonIdRank;

typedef enum {
	FORMVIEW_EDIT_ID_START = WM_USER + 1200,
	FORMVIEW_EDIT_ID_END = WM_USER + 1712,
} EditIdRank;

typedef enum {
	//list combobox id rank
	QLISTVIEWCTRL_COMBOBOX_ID_START = WM_USER + 1801,
	QLISTVIEWCTRL_COMBOBOX_ID_END = WM_USER + 3800,
} ListViweComboBoxIdRank;

typedef enum {
	//list combobox id rank
	QLISTVIEWCTRL_CHECKBOX_ID_START = WM_USER + 3801,
	QLISTVIEWCTRL_CHECKBOX_ID_END = WM_USER + 8800,
} ListViweCheckBoxIdRank;
};
